
git概念 工作区→缓存区(add命令添加)→本地仓库→远程仓库
1、git本地操作
git init //初始化本地仓库，即将当前文件夹纳入到git管理，当前文件夹下会出现一个.git的隐藏文件夹
git add demo.txt  //将工作区文件(新增文件和文件修改)添加到缓存区
git add .   //将当前文件夹下的工作区文件(新增文件和文件修改)添加到缓存区。
git commit -m "提交说明"  //将所有的缓存区文件提交到本地仓库，未add到缓存区的新增文件、修改文件、删除文件不提交到本地仓库。
git commit -a -m "更新说明" //把所有工作区和缓存区的文件修改和文件删除添加到缓存区，并添加到本地仓库，未add的新创建文件不会添加。
                             相当于git add和git commit -m的组合。
git rm 文件或文件夹名 -r -f  //工作区的文件和文件夹删除添加到缓存区。
git status 查看未添加到本地仓库的修改。文件路径显示红色，表示还在工作区，没有添加打缓存区(工作区和缓存区不一致)；
           文件路径显示绿色，表示已经添加到缓存区(工作区和缓存区一致)。
git diff 查看所有文件的具体修改，也可以后跟某个文件的项目路径，值查看某文件的修改情况，输入字母q退出。
         例子:git diff src/main/java/org/jinlibrary/mybatis/po/UserInfo.java 查看UserInfo.java文件的修改情况。
git log 查看提交记录(包括提交到本地仓库和远程仓库的提交)
git show <commit-hash-id>查看某次commit的修改内容
git log -p <filename>查看某个文件的修改历史
git log -p -2 查看最近2次的更新内容

代码还原(四种情况)：
(1)修改后的代码还没有提交到缓存区(还没有执行git add命令)，git status命令显示修改过的文件是红色的。
    执行还原本地(工作区)文件修改命令：
    git checkout . 还原所有文件
    git checkout 文件名 还原某个或某些文件
    例子：git checkout src/main/java/org/jinlibrary/mybatis/po/UserInfo.java
(2)修改后的代码已经提交到缓存区(执行了git add命令)，git status 命令显示修改过的文件是绿色的。
    需要两步：
    a、执行还原缓存区文件修改命令：
    git reset head . //将所有文件更改，取消提交到缓存区。
    git reset head 文件名  //将特定文件更改，取消提交到缓存区。
    还原缓存区后，git status命令，修改过的文件就从绿色又变成红色了。
    b、执行还原本地(工作区)文件修改命令
    git checkout ./文件名
(3)修改后的代码已经提交到本地仓库(执行了git commit)
    这样只能版本回退，如下：
    a、执行版本回退命令：
    git reset head^ 回退到上一个版本(git中，HEAD代表当前版本，上一个版本就是HEAD^，再上一个版本就是HEAD^^依次类推)
    git reset head 版本号 (只需要commit标识的前7位即可)
    回退版本后，工作区文件还和本地仓库文件保持一致，git status命令显示修改过的文件是红色的。
    b、执行还原本地(工作区)文件命令
    git checkout ./文件名
(4)修改后的代码已经提交到远程仓库(执行了git push)
    同本地仓库还原。
    git cherry -v命令显示保持在本地仓库，还没有push到远程的commit，可以用于区分本地仓库还原还是远程仓库还原。
注：
(1)、工作区：就是我们直接操作的本地文件。
(2)、缓存区：位于工作区和本地仓库之间的缓存，还没有添加到本地仓库(本地存储修改日志)。(stage)
(3)、本地仓库：push到远程服务器前的暂存区(本地存储修改日志)。(tracked)
(4)、远程仓库：远程服务器，代码存储在远程服务器上。

还原后后悔，又要还原到最新的版本：
git reflog，查看历史所有commit版本。
git reset --hard 版本号  //前置还原到某历史版本
git checkout ./文件名

2、远程仓库操作
git remote 查看所有别名
git remote rename 旧仓库别名 新仓库别名  #重命名别名
git remote rm 仓库别名      #删除仓库别名
git remote -v  //查询当前文件夹对应的远程仓库(没有添加就没有，可对应多个)
git remote add 仓库别名 git@github.com:moyuguixiong/Hibernate_Example.git //给当前文件夹添加远程仓库。
git fetch 仓库别名 master //将远程仓库的代码拉取到本地
git log -p master.. 仓库别名/master  //比较本地仓库代码和远程代码的区别(fetch下来的仓库合并到本地仓库之前)
git merge 仓库别名/master //将本地代码合并到本地仓库
git pull 仓库别名 master  //相当于执行fetch+merge
git push -u 仓库别名 master //将本地仓库代码合并到远程仓库。
git cherry -v 查看已经提交到本地仓库，但是还没有push到远程仓库的提交
git log master ^仓库别名/master 也是查看已经提交到本地仓库(缓存区)，但是还没有push到远程仓库的提交，更详细。


